package cc.view;

import cc.service.PlanilhaConfig;
import cc.service.PlanilhaFlights;
import cc.service.PlanilhaSectConfig;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author luisg
 */
public class TelaInicial extends javax.swing.JFrame {
    private File[] arquivosSelecionados = new File[]{};
    private DefaultTableModel modelo = new DefaultTableModel();
    private boolean detalhar = false;
    /**
     * Creates new form Selecao
     */
    public TelaInicial() {
        setTitle("CC");
        initComponents();
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(600,400);
        setVisible(true);
        modelo = (DefaultTableModel) jTable1.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jRadioButtonDetalhar = new javax.swing.JRadioButton();
        jButtonSelecionarArquivos = new javax.swing.JButton();
        jButtonValidar = new javax.swing.JButton();
        jButtonSair = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Arquivo", "Tipo", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(300);
            jTable1.getColumnModel().getColumn(0).setHeaderValue("Arquivo");
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(1).setHeaderValue("Tipo");
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(2).setHeaderValue("Status");
        }

        jRadioButtonDetalhar.setText("Detalhar");
        jRadioButtonDetalhar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonDetalharActionPerformed(evt);
            }
        });

        jButtonSelecionarArquivos.setText("Selecionar arquivos");
        jButtonSelecionarArquivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelecionarArquivosActionPerformed(evt);
            }
        });

        jButtonValidar.setText("Validar");
        jButtonValidar.setEnabled(false);
        jButtonValidar.setMaximumSize(new java.awt.Dimension(80, 23));
        jButtonValidar.setMinimumSize(new java.awt.Dimension(80, 23));
        jButtonValidar.setPreferredSize(new java.awt.Dimension(80, 23));
        jButtonValidar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValidarActionPerformed(evt);
            }
        });

        jButtonSair.setText("Sair");
        jButtonSair.setMaximumSize(new java.awt.Dimension(80, 23));
        jButtonSair.setMinimumSize(new java.awt.Dimension(80, 23));
        jButtonSair.setPreferredSize(new java.awt.Dimension(80, 23));
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonSelecionarArquivos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRadioButtonDetalhar)
                        .addGap(11, 11, 11)
                        .addComponent(jButtonValidar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSair, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonDetalhar)
                    .addComponent(jButtonSelecionarArquivos)
                    .addComponent(jButtonValidar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSair, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonSairActionPerformed

    private void jButtonSelecionarArquivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelecionarArquivosActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.setDialogTitle("CC - Selecionar Arquivos");
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Arquivos CSV","csv"));
        fileChooser.setAcceptAllFileFilterUsed(false);
        
        int returnValue = fileChooser.showOpenDialog(this);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            arquivosSelecionados = fileChooser.getSelectedFiles();
            modelo.setRowCount(0);
            for (File arquivo : arquivosSelecionados) {
                String nomeDoArquivo = arquivo.getName();
                
                if (nomeDoArquivo.endsWith(PlanilhaFlights.SUFIXO_ARQUIVO)) {
                    modelo.addRow(new Object[]{nomeDoArquivo,"FLIGHTS", "", arquivo.getAbsolutePath()});
                } else if (nomeDoArquivo.endsWith(PlanilhaSectConfig.SUFIXO_ARQUIVO)) {
                    modelo.addRow(new Object[]{nomeDoArquivo,"SECT CONFIG", "", arquivo.getAbsolutePath()});
                } else if (nomeDoArquivo.endsWith(PlanilhaConfig.SUFIXO_ARQUIVO)) {
                    modelo.addRow(new Object[]{nomeDoArquivo,"CONFIG", "", arquivo.getAbsolutePath()});
                } else {
                    modelo.addRow(new Object[]{nomeDoArquivo,"DESCONHECIDO", "", arquivo.getAbsolutePath()});
                }
            }
        }
        jButtonValidar.setEnabled(true);
    }//GEN-LAST:event_jButtonSelecionarArquivosActionPerformed

    private void jRadioButtonDetalharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonDetalharActionPerformed
        detalhar = jRadioButtonDetalhar.isSelected();
    }//GEN-LAST:event_jRadioButtonDetalharActionPerformed

    private void jButtonValidarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValidarActionPerformed
        if (arquivosSelecionados.length == 0) {
        return; // Nenhum arquivo selecionado
    }

    jProgressBar1.setMinimum(0);
    jProgressBar1.setMaximum(arquivosSelecionados.length);
    jProgressBar1.setValue(0);
    jProgressBar1.setStringPainted(true);

    // Cria e executa o SwingWorker
    new SwingWorker<Void, Integer>() {
        @Override
        protected Void doInBackground() throws Exception {
            for (int index = 0; index < arquivosSelecionados.length; index++) {
                File arquivo = arquivosSelecionados[index];
                String nomeDoArquivo = arquivo.getName();

                if (nomeDoArquivo.endsWith(PlanilhaFlights.SUFIXO_ARQUIVO)) {
                    PlanilhaFlights.verificarIntegridade(arquivo.toPath(), detalhar);
                    modelo.setValueAt("OK", index, 2);
                } else if (nomeDoArquivo.endsWith(PlanilhaSectConfig.SUFIXO_ARQUIVO)) {
                    PlanilhaSectConfig.verificarIntegridade(arquivo.toPath(), detalhar);
                    modelo.setValueAt("OK", index, 2);
                } else if (nomeDoArquivo.endsWith(PlanilhaConfig.SUFIXO_ARQUIVO)) {
                    PlanilhaConfig.verificarIntegridade(arquivo.toPath(), detalhar);
                    modelo.setValueAt("OK", index, 2);
                } else {
                    modelo.setValueAt("ERRO", index, 2);
                }

                // Publica o progresso
                publish(index + 1);
                Thread.sleep(100); // Adiciona um pequeno delay para observar a atualização
            }
            return null;
        }

        @Override
        protected void process(java.util.List<Integer> chunks) {
            int progress = chunks.get(chunks.size() - 1); // Obtém o progresso mais recente
            jProgressBar1.setValue(progress);
            jProgressBar1.setString(String.format("%d%%", progress * 100 / arquivosSelecionados.length));
        }

        @Override
        protected void done() {
            jProgressBar1.setValue(arquivosSelecionados.length);
            jProgressBar1.setString("Processamento Concluído");
        }
    }.execute(); 
    
        jButtonValidar.setEnabled(false);
    }//GEN-LAST:event_jButtonValidarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaInicial().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSair;
    private javax.swing.JButton jButtonSelecionarArquivos;
    private javax.swing.JButton jButtonValidar;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButtonDetalhar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
